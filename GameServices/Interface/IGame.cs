using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
namespace GameServices
{
    public interface IGame
    {
        MR AddGame(DBModel.wgs001 entity);
        MR UpdateGame(DBModel.wgs001 entity);
        MR UpdateGame(List<DBModel.wgs001> entityList);
        MR AddGameMethod(DBModel.wgs002 entity);
        MR UpdateGameMethod(DBModel.wgs002 entity);
        MR UpdateGameMethod(List<DBModel.wgs002> entityList);
        List<DBModel.wgs002> GetGameMethodList(int g001, int gm002);
        List<DBModel.wgs002> GetGameMethodList();
        List<DBModel.wgs002> GetGameMethodListByCache();
        List<DBModel.wgs001> GetGameList();
        List<DBModel.wgs001> GetGameListByCache();
        DBModel.wgs001 GetGame(int key);
        MR CheckLimitBet(string account, string issue, decimal nowAmount, int g001);
        MR AddGameMethodGroup(DBModel.wgs003 entity);
        MR UpdateGameMethodGroup(List<DBModel.wgs003> entityList);
        List<DBModel.wgs003> GetGameMethodGroupList();
        List<DBModel.wgs003> GetGameMethodGroupListByCache();
        MR AddGameSession(int type, int gameID, DateTime dt, long ser_no, long start_no, int count, DateTime dts, DateTime dte, DateTime dto, int dtso, int dteo, int dtoo);
        MR AddGameSession(List<DBModel.wgs005> entityList);
        MR AddGameSession(DBModel.wgs005 entity);
        DBModel.wgs005 GetCurrentGameSession(int gameID);
        DBModel.wgs005 GetCurrentLastGameSession(int gameID);
        MR GameAllowBet(int gameID, string account);
        List<DBModel.wgs005> GetGameSessionList(int gameID, DateTime ds, DateTime de);
        List<DBModel.wgs005> GetGameSessionList(int gameID,int status, int pageIndex, int pageSize, out int recordCount);
        List<DBModel.wgs005> GetGameSessionList(int gameID, int recordCount);
        List<DBModel.wgs038> GetGameResultList(int gameID, int haveResult, int haveCalc, int pageIndex, int pageSize, out int recordCount);
        MR SetGameResultClose();
        MR SetGameResult(long gameSessionID, string result, bool overwrite, DateTime? getDT, DateTime? openDT);
        Dictionary<int, DBModel.Sysso024> TransferToPrize(string content);
        MR DeleteGameResult(List<long> gameSessionIDs, int type);
        DBModel.wgs038 GetGameResult(long key, int type);
        MR UpdateGameResult(DBModel.wgs038 entity);
        DBModel.wgs005 GetGameSession(int gameID, string issue);
        List<DBModel.wgs005> GetGameSeesionList(int gameID, List<string> issueList);
        MR GameSessionIsAllow(int gameID, string issue);
        List<DBModel.wgs028> GetIncludePrizeName(int methodID, List<DBModel.wgs028> existsList);
        MR AddGameClass(DBModel.wgs006 entity);
        MR UpdateGameClass(DBModel.wgs006 entity);
        List<DBModel.wgs006> GetGameClassList();
        List<DBModel.wgs006> GetGameClassListByCache();
        MR AddGameClassPrize(DBModel.wgs007 entity);
        MR UpdateGameClassPrize(List<DBModel.wgs007> entityList);
        List<DBModel.wgs007> GetGameClassPrize(int gameClassID);
        DBModel.wgs007 GetGameClassPrize(int gameClassID, int gamePrizeGroupID);
        List<DBModel.wgs007> GetGameClassPrizeByCache();
        MR InitGamePrizeData(int gameClassID, int gameClassPrizeID);
        MR UpdateGamePrizeData(List<DBModel.wgs008> entityList);
        List<DBModel.wgs008> GetGameMethodPrizeData(int gameClassPrizeID);
        List<DBModel.wgs008> GetGameMethodPrizeData(int userID, int gameClassID, int gameClassPrizeID);
        int GetGameSessionDayCount(int gameID);
        int GetGameClassByGameID(int gameID);
        MR AddGPDData(DBModel.wgs028 entity);
        MR UpdateGPDData(List<DBModel.wgs028> entityList);
        MR DeleteGPDData(int key);
        List<DBModel.wgs028> GetGPDDataGroupList(int gameClassID);
        List<DBModel.wgs028> GetGPDDataList(int gameClassID, decimal group);
        List<DBModel.wgs029> GetSetGPDDataList(int gamePrizeClassID);
        List<DBModel.wgs028> GetGPDDataListByCache();
        MR UpdateSetGPDData(List<DBModel.wgs029> entityList);
        MR InitGPDData(int gameClassID,int gamePrizeClassID);
        MR AddOrder(DBModel.LotteryOrder OrderDataAll);
        MR CommissionOrder(string data, DBModel.wgs027 dbSet, int mgID, string mgName, DateTime orderDts, DateTime orderDte);
        List<DBModel.wgs057> CommissionList(string UserName, DateTime Dts, DateTime Dte, int pageIndex, int pageSize, out int recordCout);
        List<DBModel.OrderDayAccSumMoney> GetOrderDayAccSumMoney(DBModel.wgs027 onAccount,DateTime? dts, DateTime? dte);
        List<DBModel.CommissionDaySendMessage> GetCommissionList(DateTime Dts);
        MR CommissionDaySendMessage(string data, string mgName, DateTime Dts, DateTime Dte);
        List<DBModel.wgs045> GetOrderList(int userID, int gameID, int count);
        List<DBModel.wgs045> GetOrderList(long orderID, int gameID, int gameClassID, int gameMethod, int userID, int userIDType, string userName, int orderIsCancel, int isPrize, int orderAmountT, decimal orderAmount, int orderWLAmountT, decimal orderWLAmount, int orderTime, string issue, int issueID, int orderIsClose, int orderMode, long trace, long combine, string orderIP, DateTime? dtPrize, DateTime? dts, DateTime? dte, int pageIndex, int pageSize, out int recordCount);
        List<DBModel.wgs045> GetCheckOrderList(List<int> issueID, List<string> UserNameList, bool inUserList, decimal amount);
        List<DBModel.wgs030> GetTOrderList(long orderID, int gameID, int gameClassID, string userName, int userID, int userIDType,string issue, DateTime? dts, DateTime? dte, int pageIndex, int pageSize, out int recordCount);
        DBModel.TraceOrderDetail GetTOrderItem(long orderID, int gameID, int gameClassID, int userID, int pageIndex, int pageSize, out int recordCount);
        List<DBModel.LotteryHistoryOrder> GetOrderShowList(List<DBModel.wgs022> list);
        List<DBModel.LotteryHistoryOrder> GetOrderShowList(List<DBModel.wgs045> list);
        MR ProcessOrder(int gameClassID, int gameID, string issue, int pageIndex, int pageSize, out int recordCount);
        List<DBModel.wgs031> GetCombuyList(int myUserID, string account, int gameID, int gameClassID, string issue, int status, int pageIndex, int pageSize,DateTime? dts, DateTime? dte, out int recordCount);
        DBModel.wgs031 GetCombuy(long key, int myUserID);
        int GetCombuyCount(int status);
        List<DBModel.wgs053> GetPrizeTop(int count);
        MR ManageOrder(string op, string opt, string oc, int mu001, string mu002);
        MR JoinCombuy(long key, int buyUser, int buyCount, string password);
        DBModel.wgs045 GetOrder(long orderID);
        DBModel.wgs045 GetOrder(long orderID, int userID);
        void __CGM(int gameClassID, out Assembly assembly, out object moduleObject, out Type moduleType);
        void __CGMM(ref object moduleObject, ref Type moduleType, int type, string member, object value, out object result);
        void CalcOrder(ref DBModel.wgs022 entity);
        decimal CalcPrize(decimal max, decimal min, decimal maxp, decimal p);
        decimal CalcMaxPrize(decimal max, decimal min, decimal maxp, decimal p);
        List<DBModel.wgs038> GetGameSessionResultList(int gameClassID, int gameID, string issue, DateTime? dts, DateTime? dte, int count);
        Dictionary<int, DBModel.SysGameResultInfo> GetSysGameResultInfo(bool cache);
        MR CancelOrder(int type,List<long> orderIDs, int userID, int mgID, string mgName);
        MR CancelTOrder(List<long> tOrderIDs, int type, int loginUserID, int mgID, string mgName);
        List<DBModel.wgs038> GetNeedResultList(int gameID, bool haveResult, DateTime? dt, int recordCount);
        MR CancelJoinOrder(int type, List<long> orderIDs, int userID, int mgID, string mgName);
        void ClearGameListCache();
        void ClearGameMethodGroupListCache();
        void ClearGameMethodListCache();
        void ClearGameClassListCache();
        void ClearGameClassPrizeListCache();
        void ClearGPDDataListCache();
        decimal CheckWinLose(string result, List<DBModel.wgs045> order);
        MR Gamecj();
    }
}
